# -*- coding: utf-8 -*-

"""
Задание 26.3

В этом задании необходимо создать класс IPAddress.

При создании экземпляра класса, как аргумент передается IP-адрес и маска,
а также выполняется проверка корректности адреса и маски:
* Адрес считается корректно заданным, если он:
   - состоит из 4 чисел разделенных точкой
   - каждое число в диапазоне от 0 до 255
* маска считается корректной, если это число в диапазоне от 8 до 32 включительно

Если маска или адрес не прошли проверку, необходимо сгенерировать исключение ValueError с соответствующим текстом (смотри вывод ниже).

Также, при создании класса, должны быть созданы два атрибута экземпляра: ip и mask, в которых содержатся адрес и маска, соответственно.

Пример создания экземпляра класса:
In [1]: ip = IPAddress('10.1.1.1/24')

Атрибуты ip и mask
In [2]: ip1 = IPAddress('10.1.1.1/24')

In [3]: ip1.ip
Out[3]: '10.1.1.1'

In [4]: ip1.mask
Out[4]: 24

Проверка корректности адреса (traceback сокращен)
In [5]: ip1 = IPAddress('10.1.1/24')
---------------------------------------------------------------------------
...
ValueError: Incorrect IPv4 address

Проверка корректности маски (traceback сокращен)
In [6]: ip1 = IPAddress('10.1.1.1/240')
---------------------------------------------------------------------------
...
ValueError: Incorrect mask

"""
class IPAddress:
    def __init__(self, ip_mask):
        for i in ip_mask.split('/')[0].split('.'):
            if int(i) >= 0 and int(i) <= 255 and len(ip_mask.split('/')[0].split('.')) == 4:
                continue
            else:
                raise ValueError("Incorrect IPv4 address")
                break
        else:
            self.ip = ip_mask.split('/')[0]
        if int(ip_mask.split('/')[1]) >= 8 and int(ip_mask.split('/')[1]) <= 32:
            self.mask = int(ip_mask.split('/')[1])
        else:
            raise ValueError("Incorrect mask")

#testing
if __name__ == "__main__":
    ip = IPAddress('10.1.1.1/24')
    ip1 = IPAddress('10.1.1.1/24')
    print(ip1.ip, end = '\n\n')
    print(ip1.mask, end = '\n\n')

    ip1 = IPAddress('10.1.1.1/240')
    # не отображает следующую ошибку, т.к. скрипт завершается на предыдущей
    ip1 = IPAddress('10.1.1/24')